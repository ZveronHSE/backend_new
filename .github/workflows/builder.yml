name: "Rebuild docker images of affected modules"

on:
  push:
    branches: [ 'dev' ]
  workflow_dispatch:
    inputs:
      target:
        description: Building service module name or 'all'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRAFANA_API_TOKEN: ${{ secrets.GRAFANA_API_TOKEN}}
    strategy:
      matrix:
        include:
          - name: Address Service
            env: address_service
            dockerfile: address_service/Dockerfile
            image: ghcr.io/zveronhse/address_service:latest

          - name: API Gateway
            env: apigateway
            dockerfile: apigateway/Dockerfile
            image: ghcr.io/zveronhse/apigateway:latest

          - name: Blacklist Service
            env: blacklist_service
            dockerfile: blacklist_service/Dockerfile
            image: ghcr.io/zveronhse/blacklist_service:latest

          - name: Favorites Service
            env: favorites_service
            dockerfile: favorites_service/Dockerfile
            image: ghcr.io/zveronhse/favorites_service:latest

          - name: Parameter Service
            env: parameter_service
            dockerfile: parameter_service/Dockerfile
            image: ghcr.io/zveronhse/parameter_service:latest

          - name: Profile Service
            env: profile_service
            dockerfile: profile_service/Dockerfile
            image: ghcr.io/zveronhse/profile_service:latest

          - name: Lot Service
            env: lot_service
            dockerfile: lot_service/Dockerfile
            image: ghcr.io/zveronhse/lot_service:latest

          - name: Service Registry
            env: service_registry
            dockerfile: service_registry/Dockerfile
            image: ghcr.io/zveronhse/service_registry:latest

          - name: Auth Service
            env: auth-service
            dockerfile: auth-service/Dockerfile
            image: ghcr.io/zveronhse/auth-service:latest

          - name: Object Storage
            env: object-storage
            dockerfile: object-storage/Dockerfile
            image: ghcr.io/zveronhse/object-storage:latest

          - name: Push Notification
            env: push_notification
            dockerfile: push_notification/Dockerfile
            image: ghcr.io/zveronhse/push_notification:latest

          - name: Order service
            env: order-service
            dockerfile: order-service/Dockerfile
            image: ghcr.io/zveronhse/order-service:latest
            
          - name: Chat Service
            env: chat_service
            dockerfile: chat_service/Dockerfile
            image: ghcr.io/zveronhse/chat_service:latest

          - name: Specialist service
            env: specialist-service
            dockerfile: specialist-service/Dockerfile
            image: ghcr.io/zveronhse/specialist-service:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        if: github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          git fetch origin master
          (git diff origin/master HEAD --name-only | cut -d "/" -f1 | uniq) >> temp.txt
          (readarray -t ARRAY < temp.txt; IFS=', '; echo "CHANGED=${ARRAY[*]}" >> $GITHUB_ENV)

      - name: Build and push ${{ matrix.name }} image
        if: github.event.inputs.target == 'all' || github.event.inputs.target == matrix.env || contains(env.CHANGED, matrix.env)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ matrix.image }}

  push:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via ssh
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_KEY }}
          script: |
            cd backend_new
            git checkout dev
            git pull origin dev
            docker compose pull && docker compose up -d

  e2e:
    needs: push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17.0.3
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.4.1

      - name: Delay for 1 minute
        shell: bash
        run: sleep 1m

      - name: Run e2e tests
        shell: bash
        env:
          zveron_server_host: ${{ secrets.VM_HOST }}
          zveron_server_port: ${{ secrets.VM_PORT }}
        run: gradle :e2e:test --stacktrace